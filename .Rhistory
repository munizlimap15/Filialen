plot(states_sf$geometry, fill="red" )
plot(states_sf$geometry, col="red" )
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(merged_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(merged_data)
View(merged_data)
shiny::runApp()
plot(states_sf)
plot(states_sf$geometry)
# Load necessary libraries
library(readxl)
library(ggplot2)
library(dplyr)
# Load the data
data <- read_excel("path_to_your_file/Filialdaten.xlsx")
# Handle missing values by replacing them with the mean of each column
data <- data %>%
mutate(across(where(is.numeric), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)))
# Load the data
data <- read_excel("Filialdaten.xlsx")
# Handle missing values by replacing them with the mean of each column
data <- data %>%
mutate(across(where(is.numeric), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)))
# Calculate correlation matrix and focus on correlation with Revenue (assuming 'Umsatz' is Revenue)
correlations <- cor(data %>% select_if(is.numeric))
revenue_correlations <- correlations['Umsatz',]
# Create a dataframe for plotting
revenue_correlations_df <- data.frame(Variable = names(revenue_correlations), Correlation = revenue_correlations)
# Remove the correlation of 'Umsatz' with itself
revenue_correlations_df <- revenue_correlations_df[-which(revenue_correlations_df$Variable == "Umsatz"),]
# Plotting the correlation coefficients
ggplot(revenue_correlations_df, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df$Correlation), max(revenue_correlations_df$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
runApp()
# Create a dataframe for plotting
revenue_correlations_df <- data.frame(Variable = names(revenue_correlations), Correlation = revenue_correlations)
revenue_correlations_df
runApp()
runApp()
runApp()
# Libraries
library(readxl)
library(dplyr)
library(ggplot2)
library(sf)
library(purrr)  # Added for the map2 function
library(lwgeom)
# Set working directory
#setwd("C:/Users/pedro/Desktop/JO_bonus")
# Load data
filial_data <- read_excel("Filialdaten.xlsx")
states_sf <- st_read("states.shp") %>%
st_transform(4326) %>%
mutate(state = recode(state, `Burgenland` = "Burgenland"),
State = state)
states_sf$state <- NULL
filial_data[3:10]
filial_data[4:17]
names(filial_data[4:17])
names(filial_data[4:14])
names(filial_data[6:14])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Load necessary libraries
library(readxl)
library(ggplot2)
library(dplyr)
library(gridExtra)  # Library for arranging plots
# Load the data
data <- read_excel("Filialdaten.xlsx")
# Handle missing values by replacing them with the mean of each column
data <- data %>%
mutate(across(where(is.numeric), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)))
# Adding normalized revenue to the dataset
data <- data %>%
mutate(Normalized_Revenue = Umsatz / `Kund. Anz.`)
# Calculate correlation matrix and focus on correlation with Revenue (assuming 'Umsatz' is Revenue)
correlations <- cor(data %>% select_if(is.numeric))
revenue_correlations <- correlations['Umsatz',]
# Create a dataframe for plotting
revenue_correlations_df <- data.frame(Variable = names(revenue_correlations), Correlation = revenue_correlations)
# Remove the correlation of 'Umsatz' with itself
revenue_correlations_df <- revenue_correlations_df[-which(revenue_correlations_df$Variable == "Umsatz"),]
# Plotting the correlation coefficients
correlation_plot <- ggplot(revenue_correlations_df, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df$Correlation), max(revenue_correlations_df$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Plotting raw revenue and normalized revenue
revenue_plot <- ggplot(data, aes(x = FILIALE)) +
geom_bar(aes(y = Umsatz), stat = "identity", fill = "blue") +
labs(title = "Total Revenue by Filiale", x = "Filiale", y = "Revenue")
normalized_revenue_plot <- ggplot(data, aes(x = FILIALE)) +
geom_bar(aes(y = Normalized_Revenue), stat = "identity", fill = "green") +
labs(title = "Normalized Revenue by Filiale", x = "Filiale", y = "Revenue per Customer")
# Arrange the plots side by side
grid.arrange(revenue_plot, normalized_revenue_plot, correlation_plot, ncol = 3)
# If you want to save the output as an image or PDF, you can uncomment and modify the following line:
# ggsave("output_filename.pdf", grid.arrange(revenue_plot, normalized_revenue_plot, correlation_plot, ncol = 3), width = 12, height = 8)
# Load necessary libraries
library(readxl)
library(ggplot2)
library(dplyr)
library(gridExtra)
# Load the data
data <- read_excel("Filialdaten.xlsx")
# Handle missing values by replacing them with the mean of each column
data <- data %>%
mutate(across(where(is.numeric), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)))
# Adding normalized revenue to the dataset
data <- data %>%
mutate(Normalized_Revenue = Umsatz / `Kund. Anz.`)
# Calculate correlation matrix for both Umsatz (Revenue) and Normalized_Revenue
correlations <- cor(data %>% select_if(is.numeric))
# Create a dataframe for plotting for both Revenue and Normalized Revenue
revenue_correlations_df <- data.frame(Variable = names(correlations),
Correlation = correlations['Umsatz',])
# Load necessary libraries
library(readxl)
library(ggplot2)
library(dplyr)
# Load the data
data <- read_excel("Filialdaten.xlsx")
# Handle missing values by replacing them with the mean of each column
data <- data %>%
mutate(across(where(is.numeric), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)))%>%
mutate(Normalized_Revenue = Umsatz / `Kund. Anz.`)
# Calculate correlation matrix and focus on correlation with Revenue (assuming 'Umsatz' is Revenue)
correlations <- cor(data %>% select_if(is.numeric))
revenue_correlations <- correlations['Umsatz',]
# Create a dataframe for plotting
revenue_correlations_df <- data.frame(Variable = names(revenue_correlations), Correlation = revenue_correlations)
# Remove the correlation of 'Umsatz' with itself
revenue_correlations_df <- revenue_correlations_df[-which(revenue_correlations_df$Variable == "Umsatz"),]
# Plotting the correlation coefficients
ggplot(revenue_correlations_df, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df$Correlation), max(revenue_correlations_df$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Display the plot
print(ggplot_object)
# Load necessary libraries
library(readxl)
library(ggplot2)
library(dplyr)
# Load the data
data <- read_excel("Filialdaten.xlsx")
# Handle missing values by replacing them with the mean of each column
data <- data %>%
mutate(across(where(is.numeric), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)))%>%
mutate(Normalized_Revenue = Umsatz / `Kund. Anz.`)
# Calculate correlation matrix and focus on correlation with Revenue (assuming 'Umsatz' is Revenue)
correlations <- cor(data %>% select_if(is.numeric))
revenue_correlations <- correlations['Umsatz',]
# Create a dataframe for plotting
revenue_correlations_df <- data.frame(Variable = names(revenue_correlations), Correlation = revenue_correlations)
# Remove the correlation of 'Umsatz' with itself
revenue_correlations_df <- revenue_correlations_df[-which(revenue_correlations_df$Variable == "Umsatz"),]
# Plotting the correlation coefficients
ggplot(revenue_correlations_df, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df$Correlation), max(revenue_correlations_df$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Display the plot
print(ggplot_object)
# Plotting the correlation coefficients
ggplot(revenue_correlations_df, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df$Correlation), max(revenue_correlations_df$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
revenue_correlations_df2 <- revenue_correlations_df[-which(revenue_correlations_df$Variable == "Normalized_Revenue"),]
# Plotting the correlation coefficients
ggplot(revenue_correlations_df2, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df$Correlation), max(revenue_correlations_df$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
revenue_correlations_df2
revenue_correlations_df
revenue_correlations_df2 <- revenue_correlations_df2[-which(revenue_correlations_df2$Variable == "Normalized_Revenue"),]
# Plotting the correlation coefficients
ggplot(revenue_correlations_df2, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df$Correlation), max(revenue_correlations_df$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(revenue_correlations_df2, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip()
ggplot(revenue_correlations_df2, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity")
revenue_correlations_df2
# Load necessary libraries
library(readxl)
library(ggplot2)
library(dplyr)
# Load the data
data <- read_excel("Filialdaten.xlsx")
# Handle missing values by replacing them with the mean of each column
data <- data %>%
mutate(across(where(is.numeric), ~ifelse(is.na(.), mean(., na.rm = TRUE), .)))%>%
mutate(Normalized_Revenue = Umsatz / `Kund. Anz.`)
# Calculate correlation matrix and focus on correlation with Revenue (assuming 'Umsatz' is Revenue)
correlations <- cor(data %>% select_if(is.numeric))
revenue_correlations <- correlations['Umsatz',]
revenue_correlations2 <- correlations['Normalized_Revenue',]
# Create a dataframe for plotting
revenue_correlations_df <- data.frame(Variable = names(revenue_correlations), Correlation = revenue_correlations)
revenue_correlations_df2 <- data.frame(Variable = names(revenue_correlations2), Correlation = revenue_correlations2)
# Remove the correlation of 'Umsatz' with itself
revenue_correlations_df <- revenue_correlations_df[-which(revenue_correlations_df$Variable == "Umsatz"),]
revenue_correlations_df2 <- revenue_correlations_df2[-which(revenue_correlations_df2$Variable == "Normalized_Revenue"),]
# Plotting the correlation coefficients
ggplot(revenue_correlations_df, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df$Correlation), max(revenue_correlations_df$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Plotting the correlation coefficients
ggplot(revenue_correlations_df2, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df$Correlation), max(revenue_correlations_df$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Plotting the correlation coefficients
revenue_plot = ggplot(revenue_correlations_df, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df$Correlation), max(revenue_correlations_df$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Plotting the correlation coefficients
normalized_revenue_plot = ggplot(revenue_correlations_df2, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df$Correlation), max(revenue_correlations_df$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(revenue_plot, normalized_revenue_plot, nrow = 2)
# Plotting the correlation coefficients
normalized_revenue_plot = ggplot(revenue_correlations_df2, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df2$Correlation), max(revenue_correlations_df2$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
grid.arrange(revenue_plot, normalized_revenue_plot, nrow = 2)
# Plotting the correlation coefficients
normalized_revenue_plot = ggplot(revenue_correlations_df2, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df2$Correlation), max(revenue_correlations_df2$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+xaxis(0,1)
grid.arrange(revenue_plot, normalized_revenue_plot, nrow = 2)
ggplot(revenue_correlations_df2, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df2$Correlation), max(revenue_correlations_df2$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+ xaxis(0,1)
# Plotting the correlation coefficients
normalized_revenue_plot = ggplot(revenue_correlations_df2, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df2$Correlation), max(revenue_correlations_df2$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+ xlim(0,1)
grid.arrange(revenue_plot, normalized_revenue_plot, nrow = 2)
# Plotting the correlation coefficients
normalized_revenue_plot = ggplot(revenue_correlations_df2, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df2$Correlation), max(revenue_correlations_df2$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+ xlim(-1,1)
grid.arrange(revenue_plot, normalized_revenue_plot, nrow = 2)
# Plotting the correlation coefficients
normalized_revenue_plot = ggplot(revenue_correlations_df2, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df2$Correlation), max(revenue_correlations_df2$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+ ylim(-1,1)
grid.arrange(revenue_plot, normalized_revenue_plot, nrow = 2)
# Plotting the correlation coefficients
revenue_plot = ggplot(revenue_correlations_df, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df$Correlation), max(revenue_correlations_df$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+ ylim(-1,1)
# Plotting the correlation coefficients
normalized_revenue_plot = ggplot(revenue_correlations_df2, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df2$Correlation), max(revenue_correlations_df2$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+ ylim(-1,1)
grid.arrange(revenue_plot, normalized_revenue_plot, nrow = 2)
# Set a common order for the factors based on the first dataframe
variable_order <- revenue_correlations_df$Variable[order(revenue_correlations_df$Correlation)]
# Apply this order to the factor levels in both dataframes
revenue_correlations_df$Variable <- factor(revenue_correlations_df$Variable, levels = variable_order)
revenue_correlations_df2$Variable <- factor(revenue_correlations_df2$Variable, levels = variable_order)
# Plotting the correlation coefficients
revenue_plot = ggplot(revenue_correlations_df, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df$Correlation), max(revenue_correlations_df$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+ ylim(-1,1)
# Plotting the correlation coefficients
normalized_revenue_plot = ggplot(revenue_correlations_df2, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df2$Correlation), max(revenue_correlations_df2$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+ ylim(-1,1)
grid.arrange(revenue_plot, normalized_revenue_plot, nrow = 2)
variable_order
# Set a common order for the factors based on the first dataframe
variable_order <- revenue_correlations_df$Variable[order(revenue_correlations_df$Correlation)]
variable_order2 <- revenue_correlations_df$Variable[order(revenue_correlations_df$Correlation)]
# Apply this order to the factor levels in both dataframes
revenue_correlations_df$Variable <- factor(revenue_correlations_df$Variable, levels = variable_order)
revenue_correlations_df2$Variable <- factor(revenue_correlations_df2$Variable, levels = variable_order2)
# Plotting the correlation coefficients
revenue_plot = ggplot(revenue_correlations_df, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df$Correlation), max(revenue_correlations_df$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+ ylim(-1,1)
# Plotting the correlation coefficients
normalized_revenue_plot = ggplot(revenue_correlations_df2, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue/ visitors", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df2$Correlation), max(revenue_correlations_df2$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+ ylim(-1,1)
grid.arrange(revenue_plot, normalized_revenue_plot, nrow = 2)
revenue_correlations_df <- data.frame(Variable = names(revenue_correlations), Correlation = revenue_correlations)
revenue_correlations_df2 <- data.frame(Variable = names(revenue_correlations2), Correlation = revenue_correlations2)
# Remove the correlation of 'Umsatz' with itself
revenue_correlations_df <- revenue_correlations_df[-which(revenue_correlations_df$Variable == "Umsatz"),]
revenue_correlations_df2 <- revenue_correlations_df2[-which(revenue_correlations_df2$Variable == "Normalized_Revenue"),]
# Plotting the correlation coefficients
revenue_plot = ggplot(revenue_correlations_df, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df$Correlation), max(revenue_correlations_df$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+ ylim(-1,1)
# Plotting the correlation coefficients
normalized_revenue_plot = ggplot(revenue_correlations_df2, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df2$Correlation), max(revenue_correlations_df2$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+ ylim(-1,1)
grid.arrange(revenue_plot, normalized_revenue_plot, nrow = 2)
# Plotting the correlation coefficients
normalized_revenue_plot = ggplot(revenue_correlations_df2, aes(x = reorder(Variable, Correlation), y = Correlation, fill = Correlation)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Correlation of Variables with Revenue/visitors", x = "Variable", y = "Correlation Coefficient") +
coord_flip() +  # This flips the axes for better readability
scale_fill_gradient2(low = "red", high = "green", mid = "yellow", midpoint = 0, limit = c(min(revenue_correlations_df2$Correlation), max(revenue_correlations_df2$Correlation))) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))+ ylim(-1,1)
grid.arrange(revenue_plot, normalized_revenue_plot, nrow = 2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
195402872.63-
50517048.73+
44726394.44+
7867442.07+
25531967.40+
1532053.00+
14236380.47+
16017992.36+
26557771.50+
8415822.67
50517048.73+
44726394.44+
7867442.07+
25531967.40+
1532053.00+
14236380.47+
16017992.36+
26557771.50+
8415822.67
50517048.73+44726394.44+  7867442.07+ 25531967.40+ 1532053.00+14236380.47+ 16017992.36+ 26557771.50+ 8415822.67
runApp()
runApp()
# Let's correctly sum up the revenues for each Austrian state to get the total for Austria
revenues = [
# Recalculating the total revenue for Austria by summing up the revenues of each state
total_revenue_austria = 50517048.73 + 44726394.44 + 7867442.07 + 25531967.40 + 1532053.00 + 14236380.47 + 16017992.36 + 26557771.50 + 8415822.67
total_revenue_austria
runApp()
runApp()
runApp()
227+198+48+131+11+66+84+141+36
runApp()
runApp()
